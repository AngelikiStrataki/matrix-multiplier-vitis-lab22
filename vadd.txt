#define DATA_SIZE 16


extern "C" {
void vadd(int* A, // Read-Only Vector 1
          int* B, // Read-Only Vector 2
          int* C,     // Output Result
          int size                 // Size in integer
          ) {

#pragma HLS INTERFACE m_axi port = A offset = slave bundle = gmem
#pragma HLS INTERFACE m_axi port = B offset = slave bundle = gmem
#pragma HLS INTERFACE m_axi port = C offset = slave bundle = gmem
#pragma HLS INTERFACE s_axilite port = A bundle = control
#pragma HLS INTERFACE s_axilite port = B bundle = control
#pragma HLS INTERFACE s_axilite port = C bundle = control
#pragma HLS INTERFACE s_axilite port = size bundle = control
#pragma HLS INTERFACE s_axilite port = return bundle = control

  unsigned int v1_buffer[DATA_SIZE][DATA_SIZE];   // Local memory to store vector1
  unsigned int v2_buffer[DATA_SIZE][DATA_SIZE];   // Local memory to store vector2
  unsigned int vout_buffer[DATA_SIZE][DATA_SIZE]; // Local Memory to store result

#pragma HLS ARRAY_PARTITION variable=A complete
#pragma HLS ARRAY_PARTITION variable=B complete
#pragma HLS ARRAY_PARTITION variable=v1_buffer complete dim=2
#pragma HLS ARRAY_PARTITION variable=v2_buffer complete dim=1
#pragma HLS ARRAY_PARTITION variable=vout_buffer complete dim=2


  for (int i = 0; i < size; i++) {
#pragma HLS UNROLL
      for (int j = 0; j < size; j++) {
    	  v1_buffer[i][j] = A[i*size + j];
    	  v2_buffer[i][j] = B[i*size + j];
      }
   }

  for(int i =0; i < size; i++){
	for (int j = 0; j < size; ++j){
            vout_buffer[i][j] = 0;
            for (int k = 0; k < size; ++k){
#pragma HLS UNROLL
            	vout_buffer[i][j] += v1_buffer[i][k] * v2_buffer[k][j];
            }
        }

   }

  for(int i=0; i<size ;i++){
	  for (int j = 0; j < size; j++) {
#pragma HLS UNROLL
               C[i*size + j] = vout_buffer[i][j];
	   }

   }
}
}



